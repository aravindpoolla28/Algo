# This workflow will install Python dependencies and run the algo_crossover.py script.
#
# IMPORTANT: GitHub Actions are NOT designed for infinitely looping processes.
# This workflow will run for a maximum of 6 hours (default for public repos)
# and then be terminated. For a truly continuous bot, consider a dedicated server,
# cloud platform, or Docker deployment.

name: Algo Crossover Runner # <--- Unique name for this workflow

on:
  push:
    branches: [ "main" ]
  # Allows you to manually trigger the workflow from the GitHub Actions tab
  workflow_dispatch:

permissions:
  contents: read

jobs:
  run_algo: # Unique job name
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository code
      uses: actions/checkout@v4

    # NEW STEP: Get and print the public IP address of the runner
    # We now set the output to a file that GITHUB_OUTPUT action can read,
    # and expose it as an environment variable to subsequent steps.
    - name: Get Runner Public IP
      id: get_ip # Assign an ID to this step to reference its outputs
      run: |
        echo "Fetching runner's public IP address..."
        PUBLIC_IP=$(curl -s ifconfig.me) # Using ifconfig.me for simplicity
        echo "ip_address=$PUBLIC_IP" >> "$GITHUB_OUTPUT" # Modern way to set step output
        echo "--------------------------------------------------------"
        echo "❗❗ Runner Public IP Address: $PUBLIC_IP ❗❗"
        echo "--------------------------------------------------------"
        echo "Please ensure this IP is whitelisted on your exchange."
        echo "--------------------------------------------------------"

    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # Install common libraries
        pip install pandas requests pytz ta
        pip install delta_rest_client # Assuming it's pip-installable.

    - name: Execute Algo Crossover Script
      # Pass the IP from the previous step as an environment variable to the Python script
      env:
        RUNNER_PUBLIC_IP: ${{ steps.get_ip.outputs.ip_address }} # Reference the output by step ID
      run: |
        python algo_crossover.py # This runs the NEW script

    # Optional: Add steps here for notifications on script completion/failure,
    # or to upload logs if the script exits.
